---
title: "Population genetics analyses compiled"
author: "Julia Harenčár"
date: "5/2/2022"
format: 
  html:
    code-fold: true
    code-tools: true
    code-overflow: wrap
    toc: true
    number-sections: true
theme:
  light: minty
  dark: superhero
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
library(ggplot2)
library(ggrepel)
library(patchwork)
library(dplyr)
library(tidyverse)
```

# title: "ANGSD_selected_sites_co0.15x.Rmd"

author: "Julia Harenčár" date: "5/2/2022" output: html_document

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	fig.height = 3,
	fig.path = "PCAngsd_figs/",
	fig.width = 5
)
knitr::opts_knit$set(root.dir = '/Users/Julia/Documents/GitHub/Population_genetics_vill_alle')
#knitr::opts_knit$set(root.dir = '/Users/Julia/Library/CloudStorage/GoogleDrive-jharenca@ucsc.edu/My Drive/GitHub/seq_analysis/ANGSD')
```

This markdown summarizes the PCAs I generated by running PCAngsd on the genotype likelihood (beagle) file generated from clean bams with greater than 0.05x coverage WITH -sites specified based on bcftools site filtering.

#### PCAs of alle, vill, and hybrids only (ANGSD_1; only selected sites with 0.05x coverage cutoff)

PCAngsd run on beagle file from angsd1 (samtools; see 'ANGSD run tracking - full dataset' in `[g-drive]/GitHub/seq_analysis/ANGSD/angsd_runs` with estimation of independent allele frequencies. Plot created from output of the following code:\
`python pcangsd.py -beagle $IN_DIR/selected_sites_0.05co_AVH.genolike.beagle.gz -o $OUT_DIR/sites_0.15co_AVH_2_PCAngsd`

```{r full_angsd1_AVH_PCA, echo=FALSE}
AVHF1pop <- read.table("angsd_out/AHVF1_231220.pop.info")
cov <- as.matrix(read.table("angsd_out/PCAngsd/AHVF1_231220.PCAngsd.cov"))
e <- eigen(cov)

PC1 <- e$vectors[,1]
PC2 <- e$vectors[,2]
spp <- AVHF1pop[,2]
ID <- AVHF1pop[,1]
PC12.AVHF1.co0.15 <- data.frame(PC1, PC2, ID, spp)

# Calculate the proportion of variance explained by each PC
variance_explained <- e$values / sum(e$values)
variance_explained[2] # only like 2%, so very little and can ignore

ggplot(PC12.AVHF1.co0.15, aes(x=PC1, y=PC2, fill=spp)) +
  geom_point(size = 3, pch = 21, colour="black") +
  scale_fill_manual(values=c("#CC79A7", "#93c572","#56B4E9", "#F0E442"), name=paste("Species"), labels=c(expression(italic("C. allenii")), "F1","hybrid", expression(italic("C. villosissimus")))) +
  scale_x_reverse() +
  theme_bw() +
  theme(legend.text.align = 0) + 
  geom_text_repel(aes(label=ID), size =1.5, nudge_y = 0.03, max.overlaps = 30)
#ggtitle("AVH1.selected.sites.co0.15x") +
#geom_text_repel(aes(label=ID), size =3, nudge_y = 0.03)
 
  
## example of how to add repelled text labels:
#library(ggrepel)
#ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars))) +
#  geom_text_repel() +
#  geom_point(color = 'red') +
#  theme_classic(base_size = 16)
```

#### PCAs of alle, vill, hybrids, guan, and laev (ANGSD_1; only clean bams with 0.15x coverage cutoff - less than 35bp and lower than 20 mapping Q removed)

##FIX## #PCAngsd run on beagle file from angsd1 (samtools; see 'ANGSD run tracking - full dataset' in \#`[g-drive]/GitHub/seq_analysis/ANGSD/angsd_runs` with estimation of independent allele frequencies. #Plot created from output of the following code:\
\#`pcangsd.py -beagle $IN_DIR/full_AVHLG_genolike.beagle.gz -o $OUT_DIR/AVHLG_1_PCAngsd -threads 44`

```{r full_angsd1_AVHLG_PCA, echo=FALSE}
LGVHApop <- read.table("angsd_out/LGVHA.clean.pop.info")
cov <- as.matrix(read.table("angsd_out/PCAngsd/sites_0.15co_nosml_q20_LGVHA_PCAngsd.cov"))
e <- eigen(cov)

PC1 <- e$vectors[,1]
PC2 <- e$vectors[,2]
spp <- LGVHApop[,2]
ID <- LGVHApop[,1]
PC12.LGVHA.co0.15X <- data.frame(PC1, PC2, ID, spp)

library(ggplot2)
ggplot(PC12.LGVHA.co0.15X, aes(x=PC1, y=PC2)) +
  geom_point(aes(color=factor(spp))) +
  ggtitle("LGVHA.co0.15x") +
  geom_text_repel(aes(label=ID), size =3, nudge_y = 0.03) 
 
  

#labeling code to check out:
#ggplot(tab, aes(x = EV2, y = EV1, col = pop)) +
#  geom_point(alpha = 0.5, size = 5) +
#  # geom_text(aes(label=sample.id), size =3, hjust = 0, nudge_x = 0.02) +
#  # geom_text(aes(label=sample.id), size =3, position=position_jitter(width=0.2,height=0,2)) +
#  geom_text_repel(aes(label=sample.id), size =3, nudge_y = 0.03) +
#  theme_bw()
```

## Dsuite

### Per Chromosome Dstats and F4-ratio

```{r}
# Per chromosome  values and p-val correction
raw_pvals <- c(8.12e-07, 2.66e-06, 4.52e-13,  1.39e-10, 7.16e-09, 1.27e-07, 1.20e-06, 1.05e-10, 6.95e-05)
FDR_pvals <- p.adjust(raw_pvals, method = "BH")
```

### Plotting f_dM

#### 50 variant windows, 25 variant steps

```{r}
# Read all chromosome files intoo single dataframe
# Create an empty dataframe to store the combined data
LAEVout_w50s25_all9 <- data.frame()

# List all the .tsv files in the directory
file_list <- list.files(path = "./Dsuite/f_dM_w50s25/", pattern = "*.tsv", full.names = TRUE)

# Loop through each file and read it into a temporary dataframe
for (file in file_list) {
  temp_df <- read.delim(file, sep = "\t")
  
  # Combine the temporary dataframe with the existing data
  LAEVout_w50s25_all9 <- rbind(LAEVout_w50s25_all9, temp_df)
}

# Plotting 50,25 f_dM

# remove small contigs, keep only chromosomes
LAEVout_w50s25_all9 <- LAEVout_w50s25_all9 %>% 
  filter(startsWith(chr, "Chrom"))

# check for failed rows
# LAEVout_w50s25_all9[is.na(LAEVout_w50s25_all9$f_dM), ]
# remove failed rows
LAEVout_w50s25_all9 <- LAEVout_w50s25_all9[!is.na(LAEVout_w50s25_all9$f_dM), ]

# create thresholds of mean + and - three standard deviations
mean_plus_three_sd <- mean(LAEVout_w50s25_all9$f_dM)+3*sd(LAEVout_w50s25_all9$f_dM)
mean_minus_three_sd <- mean(LAEVout_w50s25_all9$f_dM)-3*sd(LAEVout_w50s25_all9$f_dM)

# create single bp location for x-axis that adds previous chromosmes lengths
data_cum <- LAEVout_w50s25_all9 %>% 
  group_by(chr) %>% 
  summarise(max_windowStart = max(windowStart)) %>% 
  mutate(windowStart_add = lag(cumsum(max_windowStart), default = 0)) %>% 
  select(chr, windowStart_add)

LAEVout_w50s25_all9 <- LAEVout_w50s25_all9 %>% 
  inner_join(data_cum, by = "chr") %>% 
  mutate(windowStart_cum = windowStart + windowStart_add)

axis_set <- LAEVout_w50s25_all9 %>% 
  group_by(chr) %>% 
  summarize(center = mean(windowStart_cum))

ggplot(data=LAEVout_w50s25_all9, aes(x=windowStart_cum, y=f_dM, color = as_factor(chr))) +
  geom_point() +
  geom_hline(yintercept = c(mean_plus_three_sd, mean_minus_three_sd), linetype = "dashed", color = "red") +
  scale_color_manual(values = rep(c("black", "darkgray"), unique(length(axis_set$chr)))) +
  guides(color = "none") +
  geom_point(data = subset(LAEVout_w50s25_all9, f_dM > mean_plus_three_sd | f_dM < mean_minus_three_sd), color = "red") +
  scale_x_continuous(label = axis_set$chr, breaks = axis_set$center) +
  labs(x = NULL, 
       y = "f<sub>dM")

# Save plot
ggsave("Dsuite/LAEVout_w50s25_f_dM_allChrs.png", device = "png", width = 110, height = 7, units = "cm")

```

\
